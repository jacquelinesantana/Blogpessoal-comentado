package com.generation.blogpessoal.security;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.server.ResponseStatusException;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.security.SignatureException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;


@Component
public class JwtAuthFilter extends OncePerRequestFilter {

	/*
	 * √© respons√°vel por pr√©-processar todas as Requisi√ß√µes HTTP, 
	 * em busca do Token JWT enviado no Cabe√ßalho (header) da Requisi√ß√£o
	 */
	
	//inje√ß√£o de dependencia
	@Autowired
	private JwtService jwtService;
	
	//inje√ß√£o de dependencia
	@Autowired
	private UserDetailsServiceImpl userDetailsService;
	
	/*
	 * HttpServletRequest request: √â a Requisi√ß√£o HTTP que ser√° analisada pelo filtro.
	 * 
	 * HttpServletResponse response: √â a Resposta da Requisi√ß√£o HTTP que foi analisada pelo Filtro de Servlet
	 * 
	 * FilterChain filterChain: √â um Objeto fornecido pela Spring Security, 
	 * indicando qual ser√° o pr√≥ximo filtro que ser√° executado.
	 * 
	 */
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
		
		/*
		 * Criamos a vari√°vel do tipo String, chamada authHeader, que receber√° o Token JWT presente no Cabe√ßalho da 
		 * Requisi√ß√£o HTTP, na propriedade Authorization, atrav√©s do M√©todo getHeader("Authorization"), 
		 * da Interface HttpServletRequest.
		 */
		String authHeader = request.getHeader("Authorization");
        String token = null;
        String username = null;
		
		try {
			if(authHeader != null && authHeader.startsWith("Bearer ")) {
				/*
				 * Foi criado um la√ßo condicional que verifica se o Token JWT foi encontrado no Cabe√ßalho da Requisi√ß√£o 
				 * e se ele inicia com a palavra "Bearer ", atrav√©s do M√©todo startsWith() da Classe String.
				 * 
				 */
				token = authHeader.substring(7); // remove o "Bearer "
				username = jwtService.extractUsername(token); // extrair o username do token
			}
			
			/*
			 * Verifica se a vari√°vel username √© diferente de nulo, ou seja, se foi encontrado o usuario (e-mail) no 
			 * Payload do Token JWT e Checa o Security Context (Contexto de Seguran√ßa), atrav√©s do M√©todo getContext()
			 *  da Classe SecurityContextHolder, que retornar√° o Contexto de Seguran√ßa atual, para verificar se o
			 *   usuario n√£o est√° autenticado na Security Context, atrav√©s do M√©todo getAuthentication() da Interface
			 *    SecurityContext.
			 */
			if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);
				/*
				 *  Se a condi√ß√£o for verdadeira, inicia o processo de constru√ß√£o do Objeto da Classe UserDetails,
				 *   que armazenar√° as informa√ß√µes do usu√°rio autenticado, atrav√©s da Classe UserDetailsServiceImpl,
				 *    que checar√° se o usu√°rio existe no Banco de dados.
				 */
				
                if (jwtService.validateToken(token, userDetails)) {
					/*
					 *  Valida Token JWT atrav√©s do M√©todo validateToken(), da Classe JwtService.
					 */
					
                    UsernamePasswordAuthenticationToken authToken = 
                    		new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());					/*
					 * Se o Token JWT for validado, construiremos um novo objeto da Classe UsernamePasswordAuthenticationToken, 
					 * chamado authToken, que ser√° respons√°vel por autenticar um usu√°rio na Spring Security
					 * e definir um Objeto Authentication, que ser√° itilizado para autenticar o Usu√°rio na 
					 * Security Context, com o objetivo de manter o usu√°rio conectado na Security Context 
					 * at√© o Token JWT expirar. O Construtor da Classe UsernamePasswordAuthenticationToken 
					 * solicita 3 par√¢metros:

    userDetails: Objeto da Classe UserDetails, que cont√©m os dados do usu√°rio autenticado na Spring Security.
    credentials: Senha do usu√°rio. Geralmente enviamos null neste par√¢metro, porque o Objeto UserDetails j√° possui 
    a senha criptografada.
    authorities: S√£o as Autoriza√ß√µes do usu√°rio (Roles), que ser√° obtida atrav√©s do M√©todo getAuthorities() 
    da Classe UserDetails, implementado na Classe UserDetailsImpl. Como n√£o estamos implementando as Autoriza√ß√µes, 
    ser√° enviada uma Collection vazia.


					 */
					
					/*
					 * Atrav√©s do M√©todo setDetails() da Classe UsernamePasswordAuthenticationToken, vamos adicionar 
					 * a Requisi√ß√£o HTTP dentro do Objeto authToken.
					 */
                    authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                    SecurityContextHolder.getContext().setAuthentication(authToken);
                    /*
                     * Com o Objeto authToken configurado, ele ser√° utilizado para autenticar o usu√°rio na Security 
                     * Context, atrav√©s do M√©todo setAuthentication().
                     */
				}
				
			}
            filterChain.doFilter(request, response);			/*
			 * Chamamos o pr√≥ximo Filtro de Servlet atrav√©s do m√©todo doFilter().
			 */

			/*
			 *  Se o processo de valida√ß√£o do Token JWT falhar, uma das 5 Exceptions abaixo ser√° lan√ßada:
			 *  ExpiredJwtException: O Token JWT Expirou!
				UnsupportedJwtException: O Token n√£o est√° no formato JWT.
				MalformedJwtException: A constru√ß√£o do Token est√° errada e ele deve ser rejeitado.
				SignatureException: A assinatura do Token JWT n√£o confere.
				ResponseStatusException: Retorna um HTTP Status em conjunto com uma Exceptio
			 */
        }catch(ExpiredJwtException | UnsupportedJwtException | MalformedJwtException 
                | SignatureException | ResponseStatusException e){
            response.setStatus(HttpStatus.FORBIDDEN.value());
            return;
        }
            /*
             * O Filtro Retornar√° o HTTP Status 403 ü°™ FORBIDDEN. Este Status indica que o Token √© inv√°lido
             *  e por isso o acesso n√£o foi permitido. 
             */
        
		
		
	}
}
